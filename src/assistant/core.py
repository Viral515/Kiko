from assistant.stt import STTListener
from assistant.tts import TTSSpeaker
from assistant.commands import CommandManager
from assistant.llm import LLMClient

import os

class VoiceAssistant:
    def __init__(self, stt_model_path="vosk-model-small-ru-0.22"):
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        model_path = os.path.join(current_dir, stt_model_path)
        
        print(f"üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ Vosk: {model_path}")
        if not os.path.exists(model_path):
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        
        self.stt = STTListener(model_path=model_path)
        self.tts = TTSSpeaker()
        self.commands = CommandManager()
        self.llm = LLMClient()
        self.listening_for_wake = True
        self.running = False

    def run(self):
        """–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–∫–æ–Ω—Å–æ–ª—å–Ω—ã–π)"""
        self.running = True
        self.tts.play_sound("goodMorning")
        print("üéôÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –°–∫–∞–∂–∏ '–¥–∂–∞—Ä–≤–∏—Å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")

        while self.running:
            text = self.stt.listen_once()

            if not text.strip():
                continue

            if self.listening_for_wake:
                if "–¥–∂–∞—Ä–≤–∏—Å" in text.lower():
                    print("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                    self.tts.play_sound("greet1")
                    self.listening_for_wake = False
            else:
                print(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
                cmd = self.commands.find_command(text)
                if cmd:
                    self.commands.execute(cmd, self.tts)
                else:
                    self.tts.play_sound("whatAreYouDoing")
                    #self.tts.speak("–î—É–º–∞—é...")
                    #response = self.llm.generate(text)
                    #print("ü§ñ LLM: " + response)
                    #self.tts.speak(response)
                print("üéôÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã... (—Å–∫–∞–∂–∏—Ç–µ '–¥–∂–∞—Ä–≤–∏—Å' —Å–Ω–æ–≤–∞)")
                self.listening_for_wake = True

    def run_background(self):
        """–§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–±–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)"""
        self.running = True
        self.tts.play_sound("goodMorning")
        
        while self.running:
            text = self.stt.listen_once()

            if not text.strip():
                continue

            if self.listening_for_wake:
                if "–¥–∂–∞—Ä–≤–∏—Å" in text.lower():
                    self.tts.play_sound("greet1")
                    self.listening_for_wake = False
            else:
                cmd = self.commands.find_command(text)
                if cmd:
                    self.commands.execute(cmd, self.tts)
                else:
                    self.tts.play_sound("whatAreYouDoing")
                    #self.tts.speak("–î—É–º–∞—é...")
                    #response = self.llm.generate(text)
                    #self.tts.speak(response)
                self.listening_for_wake = True

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        self.running = False
        if hasattr(self.stt, 'stream'):
            self.stt.stream.stop_stream()
            self.stt.stream.close()
        if hasattr(self.stt, 'p'):
            self.stt.p.terminate()